//=============================================================================
//
// オブジェクト [GameObj.h]
// Author : ISAKI SUGIURA
//
//=============================================================================
#pragma once
#include "main.h"
#include "Parts.h"
#include "Box.h"		// デバッグ表示用
#include <vector>


//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// 列挙型
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
enum EGameObjType 
{	// オブジェクト型
	GOT_GAMEOBJ = 0,	// 型無し
	GOT_PLAYER,			// プレイヤー
	GOT_WEAPON,			// 武器
	GOT_ENEMY,			// エネミー
	GOT_GROUND,			// 地面
	GOT_BREAK_GROUND,	// 割れた地面
	GOT_SWORD_RAIN,		// 剣の雨
	GOT_PARTICLE,		// パーティクル

	MAX_GAMEOBJTYPE
};
enum EBoundaryType 
{	// 境界種別
	BT_NONE = 0,		// 非表示
	BT_OBB,				// 境界ボックス(OBB)

	MAX_BOUNDTYPE
};


class CScene;
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
// 3Dオブジェクト 継承元クラス
//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
class CGameObj
{
private:
	CGameObj* m_pBack;		// 前のオブジェクト
	CGameObj* m_pNext;		// 次のオブジェクト

protected:
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// オブジェクト識別
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	EGameObjType m_id;		// オブジェクト型

	CScene* m_pScene;		// 所属シーン

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 基本
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	XMFLOAT3 m_vPos;		// 座標
	XMFLOAT3 m_vVel;		// 速度
	XMFLOAT3 m_vAccel;		// 加速度
	XMFLOAT3 m_vAngle;		// 角度
	XMFLOAT3 m_vScale;		// 拡縮

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 階層構造用
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	std::vector<TParts> m_parts;	// パーツ

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// その他
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	XMFLOAT4X4 m_mWorld;	// ワールド変換

	bool m_bVisible;		// 表示フラグ

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 当たり判定用
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	XMFLOAT3 m_vCenter;		// 境界ボックス(/球)中心座標
	XMFLOAT3 m_vBBox;		// 境界ボックス
	float m_fRadius;		// 境界球半径

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// デバッグ 当たり判定表示用
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	EBoundaryType m_bt;		// 境界種別
	CBox* m_pBBox;			// 境界ボックス表示用メッシュ

public:
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 基本
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	CGameObj(CScene* pScene);
	virtual ~CGameObj(void);

	virtual HRESULT Init();		// 初期化
	virtual void Update();		// 更新
	virtual void Draw();		// 不透明部分描画
	virtual void DrawAlpha();	// 半透明部分描画
	virtual void Fin();			// 終了処理

	static HRESULT InitAll(CGameObj* pTop);
	static void UpdateAll(CGameObj*& pTop);
	static void DrawAll(CGameObj* pTop);
	static void FinAll(CGameObj* pTop);

	void SetPos(XMFLOAT3 vPos) { m_vPos = vPos; }
	XMFLOAT3& GetPos() { return m_vPos; }
	void SetAngle(XMFLOAT3 vAngle) { m_vAngle = vAngle; }
	XMFLOAT3& GetAngle() { return m_vAngle; }
	void SetScale(XMFLOAT3 vScale) { m_vScale = vScale; }
	XMFLOAT3& GetScale() { return m_vScale; }
	void SetWorld(XMFLOAT4X4& mWorld) { m_mWorld = mWorld; }
	XMFLOAT4X4& GetWorld() { return m_mWorld; }
	XMFLOAT3& GetVel() { return m_vVel; }

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// オブジェクト識別
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	EGameObjType GetID() { return m_id; }
	CGameObj* GetNext() { return m_pNext; }

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 表示・非表示
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	void SetVisible(bool bVisible = true) { m_bVisible = bVisible; }
	virtual bool IsVisible() { return m_bVisible; }

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 当たり判定用
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	void SetPartsHitDefence(int parts, bool hit) { m_parts[parts].hitDefence = hit; }
	void SetPartsHitAttack(int parts, bool hit) { m_parts[parts].hitAttack = hit; }
	void SetCenter(XMFLOAT3 vCenter) { m_vCenter = vCenter; }
	XMFLOAT3& GetCenter() { return m_vCenter; }
	void SetBBox(XMFLOAT3 vBBox);
	XMFLOAT3& GetBBox() { return m_vBBox; }
	void SetRadius(float fRadius) { m_fRadius = fRadius; }
	float GetRadius() { return m_fRadius; }

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 階層構造 情報取得
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	TParts& GetParts(int parts) { return m_parts[parts]; }

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// デバッグ 当たり判定表示用
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	void SetBoundaryType(EBoundaryType bt) { m_bt = bt; }

	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	// 当たり判定
	//＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
	bool CollisionSphere(CGameObj* pObj);
	bool CollisionAABB(CGameObj* pObj = nullptr);
	int ColliAABBSideNo(CGameObj* pObj = nullptr);	// AABB同士のどの面に当たっているか
	bool CollisionOBB(CGameObj* pObj, XMFLOAT4X4 matrix, XMFLOAT3 center, XMFLOAT3 bbox, bool parts = true, int partsNum = 0);
};
